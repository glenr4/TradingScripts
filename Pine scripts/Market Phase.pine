// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © glenrutherford4

//@version=5
indicator("Market Phase", overlay = true, max_lines_count = 500)

leftBars = input(3)
rightBars=input(3)

pivotHigh = ta.pivothigh(high, leftBars, rightBars)
// plotshape(pivotHigh, style=shape.triangleup, location=location.abovebar, color=color.blue, size=size.tiny, offset=-rightBars)

pivotLow = ta.pivotlow(low, leftBars, rightBars)
// plotshape(pivotLow, style=shape.triangledown, location=location.belowbar, color=color.blue, size=size.tiny, offset=-rightBars)


//////////////////////////////
// Extend lines until they are crossed (by close)
// https://www.tradingview.com/pine-script-docs/en/v5/language/Loops.html
// https://stackoverflow.com/a/68733918
adjustHorizontalLineEnd(line[] _arrayOfLines, bool stopExtensionOnCloseCross, int fixedExtensionLength) =>
    float[] crossedLineValues = array.new_float(0)
    int _qtyOfLines = array.size(_arrayOfLines)

    if _qtyOfLines > 0
        for _i = _qtyOfLines - 1 to 0
            line  _currentLine = array.get(_arrayOfLines, _i)
            float _lineLevel   = line.get_price(_currentLine, bar_index)
            
            if stopExtensionOnCloseCross
                // Extend to current bar 
                line.set_x2(_currentLine, bar_index)

                _lineCrossed = math.sign(close[1] - _lineLevel) != math.sign(close - _lineLevel) and bar_index != line.get_x1(_currentLine)
                // _currentBarExceedsLineLength = bar_index - line.get_x1(_currentLine) > fixedExtensionLength
                
                if _lineCrossed //or _currentBarExceedsLineLength
                    array.remove(_arrayOfLines, _i)
                    crossedLineValues.push(_lineLevel)
            else
                line.set_x2(_currentLine, line.get_x1(_currentLine) + fixedExtensionLength)
        crossedLineValues
    else
        na
////////////////////////////
// Add to queue
addToQueue(line[] _arrayOfLines, int arraySize, line newElement) =>
    if _arrayOfLines.size() >= arraySize
        _arrayOfLines.shift()   // remove oldest newElement
    _arrayOfLines.push(newElement)

////////////////////////////

var line[] pivotHighs = array.new_line(0)
var line[] pivotLows = array.new_line(0)
int fixedArraySize = 5

// Add lines 
if(not na(pivotHigh))
    addToQueue(pivotHighs, fixedArraySize, line.new(x1 = bar_index - rightBars, y1=high[rightBars], x2=bar_index + 20, y2= high[rightBars], style=line.style_solid, color=color.green, width = 2)) 
if(not na(pivotLow))
    addToQueue(pivotLows, fixedArraySize, line.new(x1 = bar_index - rightBars, y1=low[rightBars], x2=bar_index + 20, y2= low[rightBars], style=line.style_solid, color=color.red, width = 2)) 

// Adjust line length of all lines
pivotHighsCrossed = adjustHorizontalLineEnd(pivotHighs, true, 200)
pivotLowsCrossed = adjustHorizontalLineEnd(pivotLows, true, 200)

if not na(pivotHighsCrossed)
    count = array.size(pivotHighsCrossed)
    if count > 0
        label.new(bar_index, high, yloc=yloc.abovebar, text = str.tostring(count), color = color.green, textcolor = color.white)

if not na(pivotLowsCrossed)
    count = array.size(pivotLowsCrossed)
    if count > 0
        label.new(bar_index, low, yloc=yloc.belowbar, text = str.tostring(count), color = color.red, textcolor = color.white, style = label.style_label_up)