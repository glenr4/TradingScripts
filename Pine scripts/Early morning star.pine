// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © glenrutherford4
// Note: in realtime, the trade box will disappear if the conditions for morning star no longer are true
// but this does not close the trade. To fix this, need to re-draw the box on every tick in realtime.

// TODO: instead of using fixed contract size, use risk in $
// TODO: update code to enable short trades

//@version=5
indicator("Early Morning Star", shorttitle="Early Morning Star", overlay=true, max_boxes_count = 500, max_labels_count = 500)

// --- Input Parameters ---
i_htf = input.timeframe("30", "Higher Timeframe (HTF)")
i_maxC2BodyRatioC1 = input.float(50.0, "Max C2 Body % of C1", minval=1.0, maxval=100.0, step=5.0, tooltip="Maximum percentage the second candle's body can be relative to the first candle's body.")
i_minC3LowerWick = input.int(5, "Min C3 Lower Wick (ticks)", minval=0, tooltip="Minimum size of the third candle's lower wick/upper wick in ticks (price * ticksize).")

// --- Helper Functions ---

// Calculates the absolute body size of a candle
f_getBodySize(candleOpen, candleClose) => math.abs(candleClose - candleOpen)

// Calculates the total range of a candle (high - low)
f_getRange(candleHigh, candleLow) => candleHigh - candleLow

// Checks if a candle is bullish
f_isBullish(candleOpen, candleClose) => candleClose > candleOpen

// Checks if a candle is bearish
f_isBearish(candleOpen, candleClose) => candleClose < candleOpen

// --- Get Higher Timeframe Data ---
// We use request.security with lookahead=barmerge.lookahead_on to get real-time HTF data,
// meaning the current HTF bar's OHLC values will update as the current (lower timeframe) bar progresses.
// This is crucial for detecting the third candle *while it is forming*.
[c1_open, c1_high, c1_low, c1_close] = request.security(syminfo.tickerid, i_htf, [open[2], high[2], low[2], close[2]], lookahead=barmerge.lookahead_on) // Candle 1 (2 HTF bars ago)
[c2_open, c2_high, c2_low, c2_close] = request.security(syminfo.tickerid, i_htf, [open[1], high[1], low[1], close[1]], lookahead=barmerge.lookahead_on) // Candle 2 (1 HTF bar ago)
[c3_open, c3_high, c3_low, c3_close] = request.security(syminfo.tickerid, i_htf, [open[0], high[0], low[0], close[0]], lookahead=barmerge.lookahead_on) // Candle 3 (Current HTF bar)

// --- Morning Star Pattern Detection ---

// Conditions for Morning Star:
// Candle 1: Bearish candle
isC1Bearish = f_isBearish(c1_open, c1_close)

// Candle 2 relative to Candle 1's range
isC2LowerLow = c2_low < c1_low
isC2LowerHigh = c2_high < c1_high

// Maximum second candle body percentage of first
isC2BodySmallRelativeC1 = f_getBodySize(c2_open, c2_close) <= f_getBodySize(c1_open, c1_close) * (i_maxC2BodyRatioC1 / 100.0)

// Candle 3: Bullish candle
isC3BullishForming = f_isBullish(c3_open, c3_close)

// Candle 3 relative to Candle 2's range
isC3HigherLow = c3_low > c2_low

// Check if the lower wick is greater than or equal to the user-defined minimum in ticks.
isC3LowerWickSufficient = (c3_open - c3_low) >= (i_minC3LowerWick * syminfo.mintick)

// Combine all conditions for Morning Star
morningStar = isC1Bearish and isC2LowerLow and isC2LowerHigh and isC2BodySmallRelativeC1 and isC3BullishForming and isC3HigherLow and isC3LowerWickSufficient

varip bool morningStarDetectedOneShot = false
varip int morningStarDetectedBarIndex = 0
varip int tradeId = 0

// Required so that only one trade is taken per bar
if morningStarDetectedOneShot
    morningStarDetectedOneShot := false

if morningStar and bar_index != morningStarDetectedBarIndex
    morningStarDetectedOneShot := true
    morningStarDetectedBarIndex := bar_index

// --- Evening Star Pattern Detection ---
var bool eveningStarDetected = false

// Conditions for Evening Star:
// Candle 1: Bullish candle
isC1Bullish = f_isBullish(c1_open, c1_close)

// Candle 2 relative to Candle 1's range
isC2HigherLow = c2_low > c1_low
isC2HigherHigh = c2_high > c1_high

// Maximum second candle body percentage of first
isC2BodySmallRelativeC1_ES = f_getBodySize(c2_open, c2_close) <= f_getBodySize(c1_open, c1_close) * (i_maxC2BodyRatioC1 / 100.0)

// Candle 3: Bearish candle
isC3BearishForming = f_isBearish(c3_open, c3_close)

// Candle 3 relative to Candle 2's range
isC3LowerHigh = c3_high < c2_high

// Check if the upper wick is greater than or equal to the user-defined minimum in ticks.
isC3UpperWickSufficient = (c3_high - c3_open) >= (i_minC3LowerWick * syminfo.mintick)

// Combine all conditions for Evening Star
eveningStar = isC1Bullish and isC2HigherLow and isC2HigherHigh and isC2BodySmallRelativeC1_ES and isC3BearishForming and isC3LowerHigh and isC3UpperWickSufficient

varip bool eveningStarDetectedOneShot = false
varip int eveningStarDetectedBarIndex = 0

// Required so that only one trade is taken per bar
if eveningStarDetectedOneShot
    eveningStarDetectedOneShot := false

if eveningStar and bar_index != eveningStarDetectedBarIndex
    eveningStarDetectedOneShot := true
    eveningStarDetectedBarIndex := bar_index

// --- Plotting and Alerts ---

// Plot Morning Star pattern
plotshape(morningStarDetectedOneShot, style=shape.triangleup, location=location.belowbar, color=color.rgb(33, 150, 243, 80), size=size.small, title="Early Morning Star")

// Plot Evening Star pattern
plotshape(eveningStarDetectedOneShot, style=shape.triangledown, location=location.abovebar, color=color.rgb(244, 67, 54, 80), size=size.small, title="Early Evening Star")

// Alerts
alertcondition(morningStarDetectedOneShot, title="Early Morning Star Alert", message="Early Morning Star pattern detected on {{ticker}} {{interval}}!")
alertcondition(eveningStarDetectedOneShot, title="Early Evening Star Alert", message="Early Evening Star pattern detected on {{ticker}} {{interval}}!")

///////////////
// Trading Engine
isBacktestingEnabled = input.bool(false, "Enable backtesting", group = "Backtesting")
rewardToRisk = input.float(2.0, "Reward to risk", step = 0.1, minval = 0.1, group = "Backtesting")
tradeSize = input.int(5, "Trade size",group = "Backtesting")
contractMultiplier = input.int(10, "Contract multiplier", group = "Backtesting")

takeProfitColour = color.new(color.green, 50)
stopLossColour = color.new(color.red, 50)

type Trade
    float entry
    float exit
    int qty
    bool isLong
    bool isWin
    float takeProfit
    float stopLoss

varip trades = array.new<Trade>()
varip isLongTradeOpen = false
varip isShortTradeOpen = false

exitTrade(float price) =>
    if(trades.size() > 0)    
        trade = trades.last()
        trade.exit := price
        trade.isWin := trade.isLong ? trade.exit >= trade.entry : trade.exit < trade.entry
        profit = math.abs(trade.exit - trade.entry) * trade.qty * contractMultiplier * (trade.isWin ? 1 : -1)
        labelText = (trade.isWin ? "Win" : "Loss") + ": $" + str.tostring(profit)
        label.new(bar_index, c3_high, labelText, color = trade.isWin ? takeProfitColour : stopLossColour)

        log.info("**exitTrade: " + str.tostring(price))
        log.info("Result: " + (trade.isWin ? "Win" : "Loss"))
        log.info("Profit: $" + str.tostring(profit))
        log.info("Risk:" + str.tostring(math.abs(trade.entry - trade.stopLoss)))
        log.info("Reward: " + str.tostring(math.abs(trade.entry - trade.takeProfit)))

enterTrade(float price, int qty, bool isLong, float takeProfit, float stopLoss) =>
    // Close last trade if open
    // if(isisLongTradeOpen() or isisShortTradeOpen())
    //     exitTrade(price)
    trades.push(Trade.new(price, na, qty, isLong, na, takeProfit, stopLoss))
    log.info("*****enterTrade: " + str.tostring(price))

// Generate Stats
calcProfit() =>
    winTotal = 0.0
    lossTotal = 0.0
    winCount = 0
    for [index, trade] in trades
        if(not na(trade.isWin))
            if(trade.isWin)
                winTotal += math.abs(trade.exit - trade.entry) * trade.qty * contractMultiplier
                winCount += 1
            else
                lossTotal += math.abs(trade.exit - trade.entry) * trade.qty * contractMultiplier

    [winTotal, lossTotal, winCount] // return

if(isBacktestingEnabled)
    totalTrades = trades.size() 
    [winTotal, lossTotal, winCount] = calcProfit()
    float winRate = totalTrades > 0 ? (winCount / totalTrades) * 100 : 0.0
    float profitFactor = lossTotal > 0 ? winTotal / lossTotal : (winTotal > 0 ? 999999999 : 0.0) // Handle division by zero

    // Stats Display
    tablePosition = input.string("Top Right", "Table Position", options=["Bottom Right", "Top Right"])

    var table tradeStatsTable = na
    string tablePos = na
    if tablePosition == "Bottom Right"
        tablePos := position.bottom_right
    else
        tablePos := position.top_right

    if na(tradeStatsTable)
        tradeStatsTable := table.new(position = tablePos, columns = 2, rows = 7, bgcolor = color.rgb(40, 44, 52, 90), frame_color = color.white, frame_width = 1, border_color = color.white, border_width = 1)

    rowTextColour = color.black

    // Header Row
    table.cell(tradeStatsTable, 0, 0, "Metric",   text_color = color.white, text_halign = text.align_left, text_size = size.normal, bgcolor = color.rgb(60, 64, 72))
    table.cell(tradeStatsTable, 1, 0, "Value",    text_color = color.white, text_halign = text.align_right, text_size = size.normal, bgcolor = color.rgb(60, 64, 72))

    // Number of Trades
    table.cell(tradeStatsTable, 0, 1, "Trades:",  text_color = rowTextColour, text_halign = text.align_left, text_size = size.normal)
    table.cell(tradeStatsTable, 1, 1, str.tostring(totalTrades), text_color = color.aqua, text_halign = text.align_right, text_size = size.normal)

    // Win Rate
    table.cell(tradeStatsTable, 0, 2, "Win Rate:", text_color = rowTextColour, text_halign = text.align_left, text_size = size.normal)
    table.cell(tradeStatsTable, 1, 2, str.tostring(winRate, "#.##") + "%", text_color = color.lime, text_halign = text.align_right, text_size = size.normal)

    // Total Wins
    table.cell(tradeStatsTable, 0, 3, "Win Total:",  text_color = rowTextColour, text_halign = text.align_left, text_size = size.normal)
    table.cell(tradeStatsTable, 1, 3, str.tostring(winTotal, "#.##"), text_color = (winTotal >= 0 ? color.lime : color.red), text_halign = text.align_right, text_size = size.normal)

    // Total Loss
    table.cell(tradeStatsTable, 0, 4, "Loss Total:",  text_color = rowTextColour, text_halign = text.align_left, text_size = size.normal)
    table.cell(tradeStatsTable, 1, 4, str.tostring(lossTotal, "#.##"), text_color = (lossTotal >= 0 ? color.lime : color.red), text_halign = text.align_right, text_size = size.normal)

    // Profit Factor
    table.cell(tradeStatsTable, 0, 5, "Profit Factor:", text_color = rowTextColour, text_halign = text.align_left, text_size = size.normal)
    table.cell(tradeStatsTable, 1, 5, str.tostring(profitFactor, "#.##"), text_color = (profitFactor >= 1 ? color.lime : color.red), text_halign = text.align_right, text_size = size.normal)

    // Profit
    profit = winTotal - lossTotal
    table.cell(tradeStatsTable, 0, 6, "Profit", text_color = rowTextColour, text_halign = text.align_left, text_size = size.normal)
    table.cell(tradeStatsTable, 1, 6, str.tostring(profit, "#.##"), text_color = (profit >= 1 ? color.lime : color.red), text_halign = text.align_right, text_size = size.normal)

    ///////////////////////
    // Trades
    entryOpenOffset = 0.3
    minStopLossSize = 1.0

    // Enter Morning Star
    if(morningStarDetectedOneShot and not isLongTradeOpen)
        entry = c3_open + entryOpenOffset

        // Close short trade if open
        if(isShortTradeOpen)
            exitTrade(entry)

        stopLossSize = math.max(math.abs(entry - c3_low), minStopLossSize) + syminfo.mintick // if stopLoss = candle low, then it will exit immediately for a loss on historical candles
        stopLoss = entry - stopLossSize
        takeProfit = entry + stopLossSize * rewardToRisk

        enterTrade(entry, tradeSize, true, takeProfit, stopLoss)
        isLongTradeOpen := true

        box.new(bar_index, takeProfit, bar_index+3, entry, bgcolor =  takeProfitColour, border_color = takeProfitColour)
        box.new(bar_index, entry, bar_index+3, stopLoss, bgcolor = stopLossColour, border_color = stopLossColour)

    // Exit Morning Star
    if(isLongTradeOpen)
        trade = trades.last()
        if(c3_high >= trade.takeProfit)
            exitTrade(trade.takeProfit)
            isLongTradeOpen := false
        
        else if(c3_low <= trade.stopLoss)
            exitTrade(trade.stopLoss)
            isLongTradeOpen := false

    // Enter Evening Star
    if(eveningStarDetectedOneShot and not isShortTradeOpen)
        entry = c3_open - entryOpenOffset

        // Close long trade if open
        if(isLongTradeOpen)
            exitTrade(entry)

        stopLossSize = math.max(math.abs(entry - c3_high), minStopLossSize) + syminfo.mintick  // if stopLoss = candle high, then it will exit immediately for a loss on historical candles
        stopLoss = entry + stopLossSize 
        takeProfit = entry - stopLossSize * rewardToRisk

        enterTrade(entry, tradeSize, false, takeProfit, stopLoss)
        isShortTradeOpen := true

        box.new(bar_index, takeProfit, bar_index+3, entry, bgcolor = takeProfitColour, border_color = takeProfitColour)
        box.new(bar_index, entry, bar_index+3, stopLoss, bgcolor = stopLossColour, border_color = stopLossColour)

     // Exit Evening Star
    if(isShortTradeOpen)
        trade = trades.last()
        if(c3_low <= trade.takeProfit)
            exitTrade(trade.takeProfit)
            isShortTradeOpen := false
        
        else if(c3_high >= trade.stopLoss)
            exitTrade(trade.stopLoss)
            isShortTradeOpen := false