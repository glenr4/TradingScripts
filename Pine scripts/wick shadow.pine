// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© glenrutherford4

//@version=5
indicator("Wick Shadow", overlay = true, max_boxes_count = 500)

shadowColour = input.color(color.rgb(94, 39, 176), title="Shadow Colour", group= "Technical")
normalTransparency = input(80, title="Shadow Transparency", group= "Technical")
significantShadowTransparency = input(30, title="Significant Shadow Transparency", group= "Technical")
minWickProportion = input.float(0.2, title="Minimum wick proportion", group= "Technical", step=0.1)
normalShadowSize = input(20, title="Shadow Length", group= "Technical")
significantShadowSize = input(200, title="Significant Shadow Length", group= "Technical")
volumeAvgPeriods = input(20, title="Volume Average Periods", group= "Technical")
minAvgMultiplier = input.float(1.3, title="Minimum Average Multiplier", group= "Technical", step=0.1)

addShadow(int offset, color newColour = na, showAsSignificantShadow = false) => 
    avgVolume = ta.ema(volume[offset], volumeAvgPeriods)
    isHighVolume = false // volume[offset] > 0 and volume[offset] >= avgVolume[offset] * minAvgMultiplier

    isSignificantBar = showAsSignificantShadow
    if(isHighVolume)
        isSignificantBar := true

    transparency = isSignificantBar ? significantShadowTransparency : normalTransparency
    shadowSize = isSignificantBar ? significantShadowSize : normalShadowSize

    boxColour = not na(newColour) ? newColour : color.new(shadowColour, transparency)

    isBullish = close[offset] > open[offset]
    body = math.abs(open[offset] - close[offset])
    fullRange = high[offset] - low[offset]
    upperWick = isBullish ? high[offset] - close[offset] : high[offset] - open[offset]
    lowerWick = isBullish ? open[offset] - low[offset] : close[offset] - low[offset]

    // Bearish wick
    isBearishWick = upperWick >= fullRange * minWickProportion

    BearishWickTop = isBearishWick ? high[offset] : na
    BearishWickBottom = isBearishWick ? (isBullish ? close[offset] : open[offset]) : na

    box.new(bar_index - offset, BearishWickTop, bar_index + shadowSize - offset, BearishWickBottom, bgcolor=boxColour, border_color=boxColour)

    // Bullish wick
    isBullishWick = lowerWick >= fullRange * minWickProportion

    BullishWickTop = isBullishWick ? (isBullish ? open[offset] : close[offset]) : na
    BullishWickBottom = isBullishWick ? low[offset] : na

    box.new(bar_index - offset, BullishWickTop, bar_index + shadowSize - offset, BullishWickBottom, bgcolor=boxColour, border_color=boxColour)

addShadow(0, na)
//////////////////
pivotBarLength = input(4, title="Bars either side of pivot", group= "Technical")

// Find pivot outside `if` block because needs to run on every bar.
pivotHigh = ta.pivothigh(pivotBarLength, pivotBarLength)
pivotLow = ta.pivotlow(pivotBarLength, pivotBarLength)

// Detect a new pivot.
newPivotHigh = not na(pivotHigh)
newPivotLow = not na(pivotLow)

if(newPivotHigh or newPivotLow)
    addShadow(pivotBarLength, showAsSignificantShadow = true)
