// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © glenrutherford4

//@version=5
indicator("Liquidity Levels", overlay = true, max_lines_count = 500)

sideBars = input(1, "Bars either side of pivot point")
fixedArraySize = input(10, "Number of pivot lines to extend")
resistanceColour = input.color(#4caf50, title="Liquidity at highs colour")
supportColour = input.color(#d809fc, title="Liquidity at lows colour")


pivotHigh = ta.pivothigh(high, sideBars, sideBars)

pivotLow = ta.pivotlow(low, sideBars, sideBars)


//////////////////////////////
// Extend lines until they are crossed
// Original loop code: https://stackoverflow.com/a/68733918
adjustHorizontalLineEnd(line[] _arrayOfLines, bool isPivotHigh) =>
    int crossedLineValues = 0
    int _qtyOfLines = array.size(_arrayOfLines)
    var line removedLine = na

    if _qtyOfLines > 0
        for _i = _qtyOfLines - 1 to 0
            line  _currentLine = array.get(_arrayOfLines, _i)
            float _lineLevel   = line.get_price(_currentLine, bar_index)
            
            // Extend to current bar 
            line.set_x2(_currentLine, bar_index)
            x1 = line.get_x1(_currentLine)
            price = line.get_price(_currentLine, x1)

            // Detect level cross
            _lineCrossedByUpperWick = isPivotHigh and high > _lineLevel and bar_index != line.get_x1(_currentLine)
            _lineCrossedByLowerWick = not isPivotHigh and low < _lineLevel and bar_index != line.get_x1(_currentLine)

            if (_lineCrossedByUpperWick or _lineCrossedByLowerWick)
                removedLine := _arrayOfLines.get(_i)
                array.remove(_arrayOfLines, _i)
                crossedLineValues += 1

        removedLine
    else
        removedLine
////////////////////////////
// Add to queue
addToQueue(line[] _arrayOfLines, int arraySize, line newElement) =>
    if _arrayOfLines.size() >= arraySize
        _arrayOfLines.shift()   // remove oldest element
    _arrayOfLines.push(newElement)

////////////////////////////

var line[] pivotHighs = array.new_line(0)
var line[] pivotLows = array.new_line(0)

// Add lines 
if(not na(pivotHigh))
    addToQueue(pivotHighs, fixedArraySize, line.new(x1 = bar_index - sideBars, y1=high[sideBars], x2=bar_index, y2= high[sideBars], style=line.style_dotted, color=resistanceColour, width = 2)) 
if(not na(pivotLow))
    addToQueue(pivotLows, fixedArraySize, line.new(x1 = bar_index - sideBars, y1=low[sideBars], x2=bar_index, y2= low[sideBars], style=line.style_dotted, color=supportColour, width = 2)) 

// Adjust line length of all lines
removedLineHigh = adjustHorizontalLineEnd(pivotHighs, true)
removedLineLow = adjustHorizontalLineEnd(pivotLows, false)

// Alerts
alertcondition(not na(removedLineHigh), title="Swept liquidity at highs", message="Swept liquidity at highs")
alertcondition(not na(removedLineLow), title="Swept liquidity at lows", message="Swept liquidity at lows")

// Wick reversal at close (WIP)
var line removedLineHighSaved = na
var line removedLineLowSaved = na
if not na(removedLineHigh)
    removedLineHighSaved := removedLineHigh
if not na(removedLineLow)
    removedLineLowSaved := removedLineLow

log.info("Highs set: " + str.tostring(not na(removedLineHigh)) + ", " + str.tostring(not na(removedLineHighSaved)))
log.info("Lows set: " + str.tostring(not na(removedLineLow)) + ", " + str.tostring(not na(removedLineLowSaved)))

isBearishSignal = barstate.isconfirmed and not na(removedLineHighSaved) and high > removedLineHighSaved.get_y1() and close < removedLineHighSaved.get_y1()
isBullishSignal = barstate.isconfirmed and not na(removedLineLowSaved) and low < removedLineLowSaved.get_y1() and close > removedLineLowSaved.get_y1()

plotshape(isBearishSignal, style=shape.triangledown, location=location.abovebar, color=color.blue, size=size.tiny)
plotshape(isBullishSignal, style=shape.triangleup, location=location.belowbar, color=color.blue, size=size.tiny)

if barstate.isconfirmed
    removedLineHighSaved := na
    removedLineLowSaved := na