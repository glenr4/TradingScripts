// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© glenrutherford4

//@version=5
indicator("Fair Value Gap", overlay = true, max_boxes_count = 500)

fixedBoxLength = input.bool(true, "Fixed Box Length")
boxLength = input.int(3, "Box Length")
boxColour = input.color(color.new(#f6fa03, 60), "Box Colour")
boxLineColour = input.color(color.new(#f6fa03, 60), "Box Outline Colour")

largeFVG = input.float(0.00010, "Large FVG", step = 0.00001)

type fvg
    box   fvgBox
    float limit
    bool isBullish

var fvg[] fvgs = array.new<fvg>(0)

isBullish(i) =>
    close[i] > open[i]
isBearish(i) => 
    close[i] < open[i]

upperWickRange = isBullish(0) ? high - close : high - open
lowerWickRange = isBullish(0) ? open - low : close - low
candleRange = high - low

topWickSize = high - math.max(open, close)
bottomWickSize = math.min(open, close) - low

firstCandleIndex = 2
secondCandleIndex = 1
lastCandleIndex = 0

isOverLapPriorBar(int middleCandleIndex) =>
    fvgSize = 0.0
    // When middle candle is bullish or bearish, this assumes the candles either side continue in the same direction
    if middleCandleIndex >= 1
        previousCandleIndex = middleCandleIndex + 1
        nextCandleIndex = middleCandleIndex - 1

        isBullishMiddleCandle = isBullish(middleCandleIndex)

        // If there is overlap of previous and next candles then there is no gap to highlight
        isOverlapPrevNext = isBullishMiddleCandle ? low[nextCandleIndex] <= high[previousCandleIndex] : high[nextCandleIndex] >= low[previousCandleIndex]

        isTopBodyOverlapped = isBullishMiddleCandle ? close[middleCandleIndex] >= low[nextCandleIndex] : open[middleCandleIndex] >= low[previousCandleIndex]
        isBottomBodyOverlapped = isBullishMiddleCandle ? open[middleCandleIndex] <= high[previousCandleIndex] : close[middleCandleIndex] <= high[nextCandleIndex]

        if not isOverlapPrevNext and isTopBodyOverlapped and isBottomBodyOverlapped
            if isBullishMiddleCandle
                array.push(fvgs, fvg.new(box.new(bar_index - middleCandleIndex, high[previousCandleIndex], bar_index + boxLength, low[nextCandleIndex], bgcolor=boxColour, border_color=boxLineColour, border_width = 1), high[previousCandleIndex], true))
                fvgSize := math.abs(high[previousCandleIndex] - low[nextCandleIndex])
            else
                array.push(fvgs, fvg.new(box.new(bar_index - middleCandleIndex, low[previousCandleIndex], bar_index + boxLength, high[nextCandleIndex], bgcolor=boxColour, border_color=boxLineColour, border_width = 1), low[previousCandleIndex], false))
                fvgSize := math.abs(low[previousCandleIndex] - high[nextCandleIndex])
    fvgSize // return value

fvgSize = isOverLapPriorBar(1) 

// Pivots
var lastPivotHigh = 0.0
var lastPivotHighIndex = 0
var lastPivotLow = 0.0
var lastPivotLowIndex = 0

pivotBarsLength = 2
pivotHigh = ta.pivothigh(pivotBarsLength,pivotBarsLength)
isPivotHigh = not na(pivotHigh)

pivotLow = ta.pivotlow(pivotBarsLength,pivotBarsLength)
isPivotLow = not na(pivotLow)

// Large FVG
// Note: pivot actually happend 'rightbars' ago ie 2 bars
isLargeFVG = fvgSize >= largeFVG

isPivotHighFVG = isLargeFVG and (isPivotHigh or isPivotHigh[1]) and isBearish(1)
// plotshape(isPivotHighFVG, style=shape.circle, location=location.abovebar, color=color.red, size=size.tiny)

isPivotLowFVG = isLargeFVG and (isPivotLow or isPivotLow[1]) and isBullish(1)
// plotshape(isPivotLowFVG, style=shape.circle, location=location.belowbar, color=color.red, size=size.tiny)

// Alerts
alertcondition(isPivotHighFVG or isPivotLowFVG, "FVG near pivot", "FVG near pivot")

// Highlights
var isInPivotHighFVG = false
var isInPivotLowFVG = false

if(isPivotHighFVG)
    isInPivotHighFVG := true
if(isInPivotHighFVG and isPivotLow)
    isInPivotHighFVG := false
    // TODO: the calculation isn't accurate yet
    // label.new(lastPivotHighIndex - pivotBarsLength, lastPivotHigh, 
    //               text = str.tostring(lastPivotHigh - pivotLow),
    //               color = color.new(color.gray, 80), 
    //               textcolor = color.red,
    //               style = label.style_label_down,
    //               textalign = text.align_right)

if(isPivotLowFVG)
    isInPivotLowFVG := true
if(isInPivotLowFVG and isPivotHigh)
    isInPivotLowFVG := false
    // label.new(lastPivotLowIndex - pivotBarsLength, lastPivotLow, text = str.tostring(pivotHigh - lastPivotLow), color = color.new(color.gray, 80), textcolor = color.green, style = label.style_label_up, textalign = text.align_right)

// bgcolor(isInPivotHighFVG ? color.new(color.red, 80) : na)
// bgcolor(isInPivotLowFVG ? color.new(color.green, 80) : na)

// Save last pivot
if(isPivotHigh)
    lastPivotHigh := pivotHigh
    lastPivotHighIndex := bar_index
// plot(lastPivotHigh, color = color.red, offset = -pivotBarsLength)

if(isPivotLow)
    lastPivotLow := pivotLow
    lastPivotLowIndex := bar_index
// plot(lastPivotLow, color = color.red, offset = -pivotBarsLength)

//////////////////////////////
// Extend lines until they are crossed (by close)
// https://www.tradingview.com/pine-script-docs/en/v5/language/Loops.html
// https://stackoverflow.com/a/68733918
i_maxLineLength = 400

adjustHorizontalLineEnd(_array, stopExtensionOnCross, fixedExtensionLength) =>
    int _qtyOfLines = array.size(_array)
    if _qtyOfLines > 0
        for _i = _qtyOfLines - 1 to 0
            fvg  _fvg = array.get(_array, _i)

            if stopExtensionOnCross
                bool  _lineCrossed = (_fvg.isBullish ? low <= _fvg.limit : high >= _fvg.limit) and bar_index != box.get_left(_fvg.fvgBox) // ignore if start of box
                
                box.set_right(_fvg.fvgBox, bar_index)
                if _lineCrossed or bar_index - box.get_left(_fvg.fvgBox) > i_maxLineLength
                    array.remove(_array, _i)

                true    // don't need a return value but this fixes a return type error
            else
                box.set_right(_fvg.fvgBox, box.get_left(_fvg.fvgBox) + fixedExtensionLength)

                false    // don't need a return value but this fixes a return type error

////////////////////////////
adjustHorizontalLineEnd(fvgs, not fixedBoxLength, boxLength)

