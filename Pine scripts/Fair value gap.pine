// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© glenrutherford4

// TODO: allow box to extend further than the most recent bar
// TODO: add signal for reversal FVG with twice body size

//@version=5
indicator("Fair Value Gap", overlay = true, max_boxes_count = 500, max_labels_count = 500)

showFVGs = input.bool(true, "Show Fair Value Gaps")
boxColour = input.color(color.new(#f6fa03, 70), "FVG Box Colour")
showOrderBlocks = input.bool(true, "Show Order Blocks")
obBoxColour = input.color(color.new(#b8b8b8, 90), "Order Block Box Colour")

boxLength = 3

type fvg
    box fvgBox
    float limit
    bool isBullish

var fvg[] fvgs = array.new<fvg>(0)
var fvg[] obs = array.new<fvg>(0)   // Order Blocks

isBullish(i) =>
    close[i] > open[i]
isBearish(i) => 
    close[i] < open[i]

isOverLapPriorBar(int middleCandleIndex) =>
    fvgSize = 0.0
    if middleCandleIndex >= 1
        previousCandleIndex = middleCandleIndex + 1
        nextCandleIndex = middleCandleIndex - 1

        isBullishMiddleCandle = isBullish(middleCandleIndex)

        // If there is overlap of previous and next candles then there is no gap to highlight
        isOverlapPrevNext = isBullishMiddleCandle ? low[nextCandleIndex] <= high[previousCandleIndex] : high[nextCandleIndex] >= low[previousCandleIndex]

        isTopBodyOverlapped = isBullishMiddleCandle ? close[middleCandleIndex] >= low[nextCandleIndex] : open[middleCandleIndex] >= low[previousCandleIndex]
        isBottomBodyOverlapped = isBullishMiddleCandle ? open[middleCandleIndex] <= high[previousCandleIndex] : close[middleCandleIndex] <= high[nextCandleIndex]

        if not isOverlapPrevNext and isTopBodyOverlapped and isBottomBodyOverlapped
            if isBullishMiddleCandle
                if showFVGs
                    array.push(fvgs, fvg.new(box.new(bar_index - middleCandleIndex, low[nextCandleIndex], bar_index + boxLength, high[previousCandleIndex], bgcolor=boxColour, border_color=boxColour, border_width = 1), low[nextCandleIndex], true))
                if showOrderBlocks
                    array.push(obs, fvg.new(box.new(bar_index - previousCandleIndex, high[previousCandleIndex], bar_index + boxLength, low[previousCandleIndex], bgcolor=obBoxColour, border_color=obBoxColour, border_width = 1), high[previousCandleIndex], true))
                fvgSize := math.abs(high[previousCandleIndex] - low[nextCandleIndex])
            else
                if showFVGs
                    array.push(fvgs, fvg.new(box.new(bar_index - middleCandleIndex, low[previousCandleIndex], bar_index + boxLength, high[nextCandleIndex], bgcolor=boxColour, border_color=boxColour, border_width = 1), high[nextCandleIndex], false))
                if showOrderBlocks
                    array.push(obs, fvg.new(box.new(bar_index - previousCandleIndex, high[previousCandleIndex], bar_index + boxLength, low[previousCandleIndex], bgcolor=obBoxColour, border_color=obBoxColour, border_width = 1), low[previousCandleIndex], false))
                fvgSize := math.abs(low[previousCandleIndex] - high[nextCandleIndex])
    fvgSize // return value


//////////////////////////////
maxLength = 400

adjustBox(_array) =>
    int _boxCount = array.size(_array)

    if _boxCount > 0
        for _i = _boxCount - 1 to 0
            fvg  _fvg = array.get(_array, _i)

            box.set_right(_fvg.fvgBox, bar_index) // extend right

            bool  _fvgMitigated = (_fvg.isBullish ? low <= _fvg.limit : high >= _fvg.limit) and bar_index != box.get_left(_fvg.fvgBox)+1 // ignore until after FVG
            if _fvgMitigated or bar_index - box.get_left(_fvg.fvgBox) > maxLength
                array.remove(_array, _i)

            _fvgMitigated // return
    else
        false
////////////////////////////

isOverLapPriorBar(1) 

fvgMitigated = false
obMitigated = false

if showFVGs
    fvgMitigated := adjustBox(fvgs)

if showOrderBlocks
    obMitigated := adjustBox(obs)

// Signals
alertcondition(fvgMitigated,"FVG Mitigated","FVG Mitigated")
alertcondition(obMitigated,"OB Mitigated","OB Mitigated")
